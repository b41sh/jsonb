#[cfg(target_arch = "x86")]
use std::arch::x86::*;
#[cfg(target_arch = "x86_64")]
use std::arch::x86_64::*;

use crate::static_cast_i32;
use crate::static_cast_i64;
use crate::static_cast_u32;

#[allow(non_camel_case_types)]
pub type m256i = __m256i;


#[inline]
pub fn make_low_nibble_mask() -> m256i {
    unsafe {
        _mm256_setr_epi8(
            16, 0, 0, 0, 0, 0, 0, 0, 0, 8, 12, 1, 2, 9, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 8,
            12, 1, 2, 9, 0, 0,
        )
    }
}

#[inline]
pub fn make_high_nibble_mask() -> m256i {
    unsafe {
        _mm256_setr_epi8(
            8, 0, 18, 4, 0, 1, 0, 1, 0, 0, 0, 3, 2, 1, 0, 0, 8, 0, 18, 4, 0, 1, 0, 1, 0, 0, 0,
            3, 2, 1, 0, 0,
        )
    }
}

#[inline]
pub fn compute_quote_mask(quote_bits: u64) -> u64 {
    unsafe {
        _mm_cvtsi128_si64(_mm_clmulepi64_si128(
            _mm_set_epi64x(0, static_cast_i64!(quote_bits)),
            _mm_set1_epi8(-1_i8 /* 0xFF */),
            0,
        )) as u64
    }
}



#[inline]
pub fn find_whitespace_and_structurals(low_nibble_mask: &m256i, high_nibble_mask: &m256i, structural_shufti_mask: &m256i, whitespace_shufti_mask: &m256i, v0: &m256i, v1: &m256i, whitespace: &mut u64, structurals: &mut u64) {
        unsafe {
            // do a 'shufti' to detect structural JSON characters
            // they are
            // * `{` 0x7b
            // * `}` 0x7d
            // * `:` 0x3a
            // * `[` 0x5b
            // * `]` 0x5d
            // * `,` 0x2c
            // these go into the first 3 buckets of the comparison (1/2/4)

            // we are also interested in the four whitespace characters:
            // * space 0x20
            // * linefeed 0x0a
            // * horizontal tab 0x09
            // * carriage return 0x0d
            // these go into the next 2 buckets of the comparison (8/16)

            let v_lo: __m256i = _mm256_and_si256(
                _mm256_shuffle_epi8(*low_nibble_mask, *v0),
                _mm256_shuffle_epi8(
                    *high_nibble_mask,
                    _mm256_and_si256(_mm256_srli_epi32(*v0, 4), _mm256_set1_epi8(0x7f)),
                ),
            );

            let v_hi: __m256i = _mm256_and_si256(
                _mm256_shuffle_epi8(*low_nibble_mask, *v1),
                _mm256_shuffle_epi8(
                    *high_nibble_mask,
                    _mm256_and_si256(_mm256_srli_epi32(*v1, 4), _mm256_set1_epi8(0x7f)),
                ),
            );
            let tmp_lo: __m256i = _mm256_cmpeq_epi8(
                _mm256_and_si256(v_lo, *structural_shufti_mask),
                _mm256_set1_epi8(0),
            );
            let tmp_hi: __m256i = _mm256_cmpeq_epi8(
                _mm256_and_si256(v_hi, *structural_shufti_mask),
                _mm256_set1_epi8(0),
            );

            let structural_res_0: u64 = u64::from(static_cast_u32!(_mm256_movemask_epi8(tmp_lo)));
            let structural_res_1: u64 = _mm256_movemask_epi8(tmp_hi) as u64;
            *structurals = !(structural_res_0 | (structural_res_1 << 32));

            let tmp_ws_lo: __m256i = _mm256_cmpeq_epi8(
                _mm256_and_si256(v_lo, *whitespace_shufti_mask),
                _mm256_set1_epi8(0),
            );
            let tmp_ws_hi: __m256i = _mm256_cmpeq_epi8(
                _mm256_and_si256(v_hi, *whitespace_shufti_mask),
                _mm256_set1_epi8(0),
            );

            let ws_res_0: u64 = u64::from(static_cast_u32!(_mm256_movemask_epi8(tmp_ws_lo)));
            let ws_res_1: u64 = _mm256_movemask_epi8(tmp_ws_hi) as u64;
            *whitespace = !(ws_res_0 | (ws_res_1 << 32));
        }
}

#[inline]
pub fn index_extract(structurals: u64, idx: u32, base: &mut Vec<u32>) {
        // 再来一个函数，构造最后的 索引

        // 5. 构造出 index，需要 SIMD
        // let idx = 0;
        // let idx_minus_64 = idx.wrapping_sub(64);
        // let idx_minus_64 = idx as u32;
        let idx_minus_64 = idx;

        let mut l = base.len();

        let idx_64_v = unsafe {
            _mm256_set_epi32(
                static_cast_i32!(idx_minus_64),
                static_cast_i32!(idx_minus_64),
                static_cast_i32!(idx_minus_64),
                static_cast_i32!(idx_minus_64),
                static_cast_i32!(idx_minus_64),
                static_cast_i32!(idx_minus_64),
                static_cast_i32!(idx_minus_64),
                static_cast_i32!(idx_minus_64),
            )
        };

        let mut bits = structurals;

        base.reserve(64);

        let cnt: usize = bits.count_ones() as usize;
        let final_len = l + cnt;

        // println!("v0             ={:#034b}", v0);
        // println!("v0             ={}", v0);
        // println!("v1             ={:#034b}", v1);
        // println!("v1             ={}", v1);
        // println!("v2             ={:#034b}", v2);
        // println!("v2             ={}", v2);
        // println!("v3             ={:#034b}", v3);
        // println!("v3             ={}", v3);
        // println!("v4             ={:#034b}", v4);
        // println!("v4             ={}", v4);
        // println!("v5             ={:#034b}", v5);
        // println!("v5             ={}", v5);
        // println!("v6             ={:#034b}", v6);
        // println!("v6             ={}", v6);
        // println!("v7             ={:#034b}", v7);
        // println!("v7             ={}", v7);
        while bits != 0 {
            let v0 = bits.trailing_zeros() as i32;
            bits &= bits.wrapping_sub(1);
            let v1 = bits.trailing_zeros() as i32;
            bits &= bits.wrapping_sub(1);
            let v2 = bits.trailing_zeros() as i32;
            bits &= bits.wrapping_sub(1);
            let v3 = bits.trailing_zeros() as i32;
            bits &= bits.wrapping_sub(1);
            let v4 = bits.trailing_zeros() as i32;
            bits &= bits.wrapping_sub(1);
            let v5 = bits.trailing_zeros() as i32;
            bits &= bits.wrapping_sub(1);
            let v6 = bits.trailing_zeros() as i32;
            bits &= bits.wrapping_sub(1);
            let v7 = bits.trailing_zeros() as i32;
            bits &= bits.wrapping_sub(1);
            let v: __m256i = unsafe { _mm256_set_epi32(v7, v6, v5, v4, v3, v2, v1, v0) };
            let v: __m256i = unsafe { _mm256_add_epi32(idx_64_v, v) };
            unsafe {
                _mm256_storeu_si256(
                    base.as_mut_ptr()
                        .add(l)
                        .cast::<std::arch::x86_64::__m256i>(),
                    v,
                )
            };

            // println!("base----={:?}", base);

            l += 8;
        }

        // println!("base={:?}", base);
        // println!("final_len={:?}", final_len);
        // We have written all the data
        unsafe { base.set_len(final_len) };
}




#[inline]
pub fn mm256i(i: i8) -> m256i {
    unsafe { _mm256_setr_epi8(
        i,
        i,
        i,
        i,
        i,
        i,
        i,
        i,
        i,
        i,
        i,
        i,
        i,
        i,
        i,
        i,
        i,
        i,
        i,
        i,
        i,
        i,
        i,
        i,
        i,
        i,
        i,
        i,
        i,
        i,
        i,
        i,
    ) }
}


#[inline(always)]
pub unsafe fn mbitmap(s1: &m256i, s2: &m256i, m: &m256i) -> u64 {
    let i1 = _mm256_movemask_epi8(_mm256_cmpeq_epi8(*s1, *m));
    let i2 = _mm256_movemask_epi8(_mm256_cmpeq_epi8(*s2, *m));
    u64::from(i1 as u32) | (u64::from(i2 as u32) << 32)
}


/// Create a value of `m256i` from the slice of bytes.
///
/// # Safety
/// This function guarantees the safety only if the length of `s` is greater than or equal to `i + 32`.
#[inline(always)]
pub unsafe fn u8_to_m256i(s: &[u8], i: usize) -> m256i {
    _mm256_setr_epi8(
        *s.as_ptr().offset(i as isize + 0) as i8,
        *s.as_ptr().offset(i as isize + 1) as i8,
        *s.as_ptr().offset(i as isize + 2) as i8,
        *s.as_ptr().offset(i as isize + 3) as i8,
        *s.as_ptr().offset(i as isize + 4) as i8,
        *s.as_ptr().offset(i as isize + 5) as i8,
        *s.as_ptr().offset(i as isize + 6) as i8,
        *s.as_ptr().offset(i as isize + 7) as i8,
        *s.as_ptr().offset(i as isize + 8) as i8,
        *s.as_ptr().offset(i as isize + 9) as i8,
        *s.as_ptr().offset(i as isize + 10) as i8,
        *s.as_ptr().offset(i as isize + 11) as i8,
        *s.as_ptr().offset(i as isize + 12) as i8,
        *s.as_ptr().offset(i as isize + 13) as i8,
        *s.as_ptr().offset(i as isize + 14) as i8,
        *s.as_ptr().offset(i as isize + 15) as i8,
        *s.as_ptr().offset(i as isize + 16) as i8,
        *s.as_ptr().offset(i as isize + 17) as i8,
        *s.as_ptr().offset(i as isize + 18) as i8,
        *s.as_ptr().offset(i as isize + 19) as i8,
        *s.as_ptr().offset(i as isize + 20) as i8,
        *s.as_ptr().offset(i as isize + 21) as i8,
        *s.as_ptr().offset(i as isize + 22) as i8,
        *s.as_ptr().offset(i as isize + 23) as i8,
        *s.as_ptr().offset(i as isize + 24) as i8,
        *s.as_ptr().offset(i as isize + 25) as i8,
        *s.as_ptr().offset(i as isize + 26) as i8,
        *s.as_ptr().offset(i as isize + 27) as i8,
        *s.as_ptr().offset(i as isize + 28) as i8,
        *s.as_ptr().offset(i as isize + 29) as i8,
        *s.as_ptr().offset(i as isize + 30) as i8,
        *s.as_ptr().offset(i as isize + 31) as i8,
    )
}

#[inline]
pub unsafe fn u8_to_m256i_rest(s: &[u8], i: usize) -> m256i {
    match s.len() - i {
        31 => _mm256_setr_epi8(
            *s.as_ptr().offset(i as isize + 0) as i8,
            *s.as_ptr().offset(i as isize + 1) as i8,
            *s.as_ptr().offset(i as isize + 2) as i8,
            *s.as_ptr().offset(i as isize + 3) as i8,
            *s.as_ptr().offset(i as isize + 4) as i8,
            *s.as_ptr().offset(i as isize + 5) as i8,
            *s.as_ptr().offset(i as isize + 6) as i8,
            *s.as_ptr().offset(i as isize + 7) as i8,
            *s.as_ptr().offset(i as isize + 8) as i8,
            *s.as_ptr().offset(i as isize + 9) as i8,
            *s.as_ptr().offset(i as isize + 10) as i8,
            *s.as_ptr().offset(i as isize + 11) as i8,
            *s.as_ptr().offset(i as isize + 12) as i8,
            *s.as_ptr().offset(i as isize + 13) as i8,
            *s.as_ptr().offset(i as isize + 14) as i8,
            *s.as_ptr().offset(i as isize + 15) as i8,
            *s.as_ptr().offset(i as isize + 16) as i8,
            *s.as_ptr().offset(i as isize + 17) as i8,
            *s.as_ptr().offset(i as isize + 18) as i8,
            *s.as_ptr().offset(i as isize + 19) as i8,
            *s.as_ptr().offset(i as isize + 20) as i8,
            *s.as_ptr().offset(i as isize + 21) as i8,
            *s.as_ptr().offset(i as isize + 22) as i8,
            *s.as_ptr().offset(i as isize + 23) as i8,
            *s.as_ptr().offset(i as isize + 24) as i8,
            *s.as_ptr().offset(i as isize + 25) as i8,
            *s.as_ptr().offset(i as isize + 26) as i8,
            *s.as_ptr().offset(i as isize + 27) as i8,
            *s.as_ptr().offset(i as isize + 28) as i8,
            *s.as_ptr().offset(i as isize + 29) as i8,
            *s.as_ptr().offset(i as isize + 30) as i8,
            0,
        ),
        30 => _mm256_setr_epi8(
            *s.as_ptr().offset(i as isize + 0) as i8,
            *s.as_ptr().offset(i as isize + 1) as i8,
            *s.as_ptr().offset(i as isize + 2) as i8,
            *s.as_ptr().offset(i as isize + 3) as i8,
            *s.as_ptr().offset(i as isize + 4) as i8,
            *s.as_ptr().offset(i as isize + 5) as i8,
            *s.as_ptr().offset(i as isize + 6) as i8,
            *s.as_ptr().offset(i as isize + 7) as i8,
            *s.as_ptr().offset(i as isize + 8) as i8,
            *s.as_ptr().offset(i as isize + 9) as i8,
            *s.as_ptr().offset(i as isize + 10) as i8,
            *s.as_ptr().offset(i as isize + 11) as i8,
            *s.as_ptr().offset(i as isize + 12) as i8,
            *s.as_ptr().offset(i as isize + 13) as i8,
            *s.as_ptr().offset(i as isize + 14) as i8,
            *s.as_ptr().offset(i as isize + 15) as i8,
            *s.as_ptr().offset(i as isize + 16) as i8,
            *s.as_ptr().offset(i as isize + 17) as i8,
            *s.as_ptr().offset(i as isize + 18) as i8,
            *s.as_ptr().offset(i as isize + 19) as i8,
            *s.as_ptr().offset(i as isize + 20) as i8,
            *s.as_ptr().offset(i as isize + 21) as i8,
            *s.as_ptr().offset(i as isize + 22) as i8,
            *s.as_ptr().offset(i as isize + 23) as i8,
            *s.as_ptr().offset(i as isize + 24) as i8,
            *s.as_ptr().offset(i as isize + 25) as i8,
            *s.as_ptr().offset(i as isize + 26) as i8,
            *s.as_ptr().offset(i as isize + 27) as i8,
            *s.as_ptr().offset(i as isize + 28) as i8,
            *s.as_ptr().offset(i as isize + 29) as i8,
            0,
            0,
        ),
        29 => _mm256_setr_epi8(
            *s.as_ptr().offset(i as isize + 0) as i8,
            *s.as_ptr().offset(i as isize + 1) as i8,
            *s.as_ptr().offset(i as isize + 2) as i8,
            *s.as_ptr().offset(i as isize + 3) as i8,
            *s.as_ptr().offset(i as isize + 4) as i8,
            *s.as_ptr().offset(i as isize + 5) as i8,
            *s.as_ptr().offset(i as isize + 6) as i8,
            *s.as_ptr().offset(i as isize + 7) as i8,
            *s.as_ptr().offset(i as isize + 8) as i8,
            *s.as_ptr().offset(i as isize + 9) as i8,
            *s.as_ptr().offset(i as isize + 10) as i8,
            *s.as_ptr().offset(i as isize + 11) as i8,
            *s.as_ptr().offset(i as isize + 12) as i8,
            *s.as_ptr().offset(i as isize + 13) as i8,
            *s.as_ptr().offset(i as isize + 14) as i8,
            *s.as_ptr().offset(i as isize + 15) as i8,
            *s.as_ptr().offset(i as isize + 16) as i8,
            *s.as_ptr().offset(i as isize + 17) as i8,
            *s.as_ptr().offset(i as isize + 18) as i8,
            *s.as_ptr().offset(i as isize + 19) as i8,
            *s.as_ptr().offset(i as isize + 20) as i8,
            *s.as_ptr().offset(i as isize + 21) as i8,
            *s.as_ptr().offset(i as isize + 22) as i8,
            *s.as_ptr().offset(i as isize + 23) as i8,
            *s.as_ptr().offset(i as isize + 24) as i8,
            *s.as_ptr().offset(i as isize + 25) as i8,
            *s.as_ptr().offset(i as isize + 26) as i8,
            *s.as_ptr().offset(i as isize + 27) as i8,
            *s.as_ptr().offset(i as isize + 28) as i8,
            0,
            0,
            0,
        ),
        28 => _mm256_setr_epi8(
            *s.as_ptr().offset(i as isize + 0) as i8,
            *s.as_ptr().offset(i as isize + 1) as i8,
            *s.as_ptr().offset(i as isize + 2) as i8,
            *s.as_ptr().offset(i as isize + 3) as i8,
            *s.as_ptr().offset(i as isize + 4) as i8,
            *s.as_ptr().offset(i as isize + 5) as i8,
            *s.as_ptr().offset(i as isize + 6) as i8,
            *s.as_ptr().offset(i as isize + 7) as i8,
            *s.as_ptr().offset(i as isize + 8) as i8,
            *s.as_ptr().offset(i as isize + 9) as i8,
            *s.as_ptr().offset(i as isize + 10) as i8,
            *s.as_ptr().offset(i as isize + 11) as i8,
            *s.as_ptr().offset(i as isize + 12) as i8,
            *s.as_ptr().offset(i as isize + 13) as i8,
            *s.as_ptr().offset(i as isize + 14) as i8,
            *s.as_ptr().offset(i as isize + 15) as i8,
            *s.as_ptr().offset(i as isize + 16) as i8,
            *s.as_ptr().offset(i as isize + 17) as i8,
            *s.as_ptr().offset(i as isize + 18) as i8,
            *s.as_ptr().offset(i as isize + 19) as i8,
            *s.as_ptr().offset(i as isize + 20) as i8,
            *s.as_ptr().offset(i as isize + 21) as i8,
            *s.as_ptr().offset(i as isize + 22) as i8,
            *s.as_ptr().offset(i as isize + 23) as i8,
            *s.as_ptr().offset(i as isize + 24) as i8,
            *s.as_ptr().offset(i as isize + 25) as i8,
            *s.as_ptr().offset(i as isize + 26) as i8,
            *s.as_ptr().offset(i as isize + 27) as i8,
            0,
            0,
            0,
            0,
        ),
        27 => _mm256_setr_epi8(
            *s.as_ptr().offset(i as isize + 0) as i8,
            *s.as_ptr().offset(i as isize + 1) as i8,
            *s.as_ptr().offset(i as isize + 2) as i8,
            *s.as_ptr().offset(i as isize + 3) as i8,
            *s.as_ptr().offset(i as isize + 4) as i8,
            *s.as_ptr().offset(i as isize + 5) as i8,
            *s.as_ptr().offset(i as isize + 6) as i8,
            *s.as_ptr().offset(i as isize + 7) as i8,
            *s.as_ptr().offset(i as isize + 8) as i8,
            *s.as_ptr().offset(i as isize + 9) as i8,
            *s.as_ptr().offset(i as isize + 10) as i8,
            *s.as_ptr().offset(i as isize + 11) as i8,
            *s.as_ptr().offset(i as isize + 12) as i8,
            *s.as_ptr().offset(i as isize + 13) as i8,
            *s.as_ptr().offset(i as isize + 14) as i8,
            *s.as_ptr().offset(i as isize + 15) as i8,
            *s.as_ptr().offset(i as isize + 16) as i8,
            *s.as_ptr().offset(i as isize + 17) as i8,
            *s.as_ptr().offset(i as isize + 18) as i8,
            *s.as_ptr().offset(i as isize + 19) as i8,
            *s.as_ptr().offset(i as isize + 20) as i8,
            *s.as_ptr().offset(i as isize + 21) as i8,
            *s.as_ptr().offset(i as isize + 22) as i8,
            *s.as_ptr().offset(i as isize + 23) as i8,
            *s.as_ptr().offset(i as isize + 24) as i8,
            *s.as_ptr().offset(i as isize + 25) as i8,
            *s.as_ptr().offset(i as isize + 26) as i8,
            0,
            0,
            0,
            0,
            0,
        ),
        26 => _mm256_setr_epi8(
            *s.as_ptr().offset(i as isize + 0) as i8,
            *s.as_ptr().offset(i as isize + 1) as i8,
            *s.as_ptr().offset(i as isize + 2) as i8,
            *s.as_ptr().offset(i as isize + 3) as i8,
            *s.as_ptr().offset(i as isize + 4) as i8,
            *s.as_ptr().offset(i as isize + 5) as i8,
            *s.as_ptr().offset(i as isize + 6) as i8,
            *s.as_ptr().offset(i as isize + 7) as i8,
            *s.as_ptr().offset(i as isize + 8) as i8,
            *s.as_ptr().offset(i as isize + 9) as i8,
            *s.as_ptr().offset(i as isize + 10) as i8,
            *s.as_ptr().offset(i as isize + 11) as i8,
            *s.as_ptr().offset(i as isize + 12) as i8,
            *s.as_ptr().offset(i as isize + 13) as i8,
            *s.as_ptr().offset(i as isize + 14) as i8,
            *s.as_ptr().offset(i as isize + 15) as i8,
            *s.as_ptr().offset(i as isize + 16) as i8,
            *s.as_ptr().offset(i as isize + 17) as i8,
            *s.as_ptr().offset(i as isize + 18) as i8,
            *s.as_ptr().offset(i as isize + 19) as i8,
            *s.as_ptr().offset(i as isize + 20) as i8,
            *s.as_ptr().offset(i as isize + 21) as i8,
            *s.as_ptr().offset(i as isize + 22) as i8,
            *s.as_ptr().offset(i as isize + 23) as i8,
            *s.as_ptr().offset(i as isize + 24) as i8,
            *s.as_ptr().offset(i as isize + 25) as i8,
            0,
            0,
            0,
            0,
            0,
            0,
        ),
        25 => _mm256_setr_epi8(
            *s.as_ptr().offset(i as isize + 0) as i8,
            *s.as_ptr().offset(i as isize + 1) as i8,
            *s.as_ptr().offset(i as isize + 2) as i8,
            *s.as_ptr().offset(i as isize + 3) as i8,
            *s.as_ptr().offset(i as isize + 4) as i8,
            *s.as_ptr().offset(i as isize + 5) as i8,
            *s.as_ptr().offset(i as isize + 6) as i8,
            *s.as_ptr().offset(i as isize + 7) as i8,
            *s.as_ptr().offset(i as isize + 8) as i8,
            *s.as_ptr().offset(i as isize + 9) as i8,
            *s.as_ptr().offset(i as isize + 10) as i8,
            *s.as_ptr().offset(i as isize + 11) as i8,
            *s.as_ptr().offset(i as isize + 12) as i8,
            *s.as_ptr().offset(i as isize + 13) as i8,
            *s.as_ptr().offset(i as isize + 14) as i8,
            *s.as_ptr().offset(i as isize + 15) as i8,
            *s.as_ptr().offset(i as isize + 16) as i8,
            *s.as_ptr().offset(i as isize + 17) as i8,
            *s.as_ptr().offset(i as isize + 18) as i8,
            *s.as_ptr().offset(i as isize + 19) as i8,
            *s.as_ptr().offset(i as isize + 20) as i8,
            *s.as_ptr().offset(i as isize + 21) as i8,
            *s.as_ptr().offset(i as isize + 22) as i8,
            *s.as_ptr().offset(i as isize + 23) as i8,
            *s.as_ptr().offset(i as isize + 24) as i8,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ),
        24 => _mm256_setr_epi8(
            *s.as_ptr().offset(i as isize + 0) as i8,
            *s.as_ptr().offset(i as isize + 1) as i8,
            *s.as_ptr().offset(i as isize + 2) as i8,
            *s.as_ptr().offset(i as isize + 3) as i8,
            *s.as_ptr().offset(i as isize + 4) as i8,
            *s.as_ptr().offset(i as isize + 5) as i8,
            *s.as_ptr().offset(i as isize + 6) as i8,
            *s.as_ptr().offset(i as isize + 7) as i8,
            *s.as_ptr().offset(i as isize + 8) as i8,
            *s.as_ptr().offset(i as isize + 9) as i8,
            *s.as_ptr().offset(i as isize + 10) as i8,
            *s.as_ptr().offset(i as isize + 11) as i8,
            *s.as_ptr().offset(i as isize + 12) as i8,
            *s.as_ptr().offset(i as isize + 13) as i8,
            *s.as_ptr().offset(i as isize + 14) as i8,
            *s.as_ptr().offset(i as isize + 15) as i8,
            *s.as_ptr().offset(i as isize + 16) as i8,
            *s.as_ptr().offset(i as isize + 17) as i8,
            *s.as_ptr().offset(i as isize + 18) as i8,
            *s.as_ptr().offset(i as isize + 19) as i8,
            *s.as_ptr().offset(i as isize + 20) as i8,
            *s.as_ptr().offset(i as isize + 21) as i8,
            *s.as_ptr().offset(i as isize + 22) as i8,
            *s.as_ptr().offset(i as isize + 23) as i8,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ),
        23 => _mm256_setr_epi8(
            *s.as_ptr().offset(i as isize + 0) as i8,
            *s.as_ptr().offset(i as isize + 1) as i8,
            *s.as_ptr().offset(i as isize + 2) as i8,
            *s.as_ptr().offset(i as isize + 3) as i8,
            *s.as_ptr().offset(i as isize + 4) as i8,
            *s.as_ptr().offset(i as isize + 5) as i8,
            *s.as_ptr().offset(i as isize + 6) as i8,
            *s.as_ptr().offset(i as isize + 7) as i8,
            *s.as_ptr().offset(i as isize + 8) as i8,
            *s.as_ptr().offset(i as isize + 9) as i8,
            *s.as_ptr().offset(i as isize + 10) as i8,
            *s.as_ptr().offset(i as isize + 11) as i8,
            *s.as_ptr().offset(i as isize + 12) as i8,
            *s.as_ptr().offset(i as isize + 13) as i8,
            *s.as_ptr().offset(i as isize + 14) as i8,
            *s.as_ptr().offset(i as isize + 15) as i8,
            *s.as_ptr().offset(i as isize + 16) as i8,
            *s.as_ptr().offset(i as isize + 17) as i8,
            *s.as_ptr().offset(i as isize + 18) as i8,
            *s.as_ptr().offset(i as isize + 19) as i8,
            *s.as_ptr().offset(i as isize + 20) as i8,
            *s.as_ptr().offset(i as isize + 21) as i8,
            *s.as_ptr().offset(i as isize + 22) as i8,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ),
        22 => _mm256_setr_epi8(
            *s.as_ptr().offset(i as isize + 0) as i8,
            *s.as_ptr().offset(i as isize + 1) as i8,
            *s.as_ptr().offset(i as isize + 2) as i8,
            *s.as_ptr().offset(i as isize + 3) as i8,
            *s.as_ptr().offset(i as isize + 4) as i8,
            *s.as_ptr().offset(i as isize + 5) as i8,
            *s.as_ptr().offset(i as isize + 6) as i8,
            *s.as_ptr().offset(i as isize + 7) as i8,
            *s.as_ptr().offset(i as isize + 8) as i8,
            *s.as_ptr().offset(i as isize + 9) as i8,
            *s.as_ptr().offset(i as isize + 10) as i8,
            *s.as_ptr().offset(i as isize + 11) as i8,
            *s.as_ptr().offset(i as isize + 12) as i8,
            *s.as_ptr().offset(i as isize + 13) as i8,
            *s.as_ptr().offset(i as isize + 14) as i8,
            *s.as_ptr().offset(i as isize + 15) as i8,
            *s.as_ptr().offset(i as isize + 16) as i8,
            *s.as_ptr().offset(i as isize + 17) as i8,
            *s.as_ptr().offset(i as isize + 18) as i8,
            *s.as_ptr().offset(i as isize + 19) as i8,
            *s.as_ptr().offset(i as isize + 20) as i8,
            *s.as_ptr().offset(i as isize + 21) as i8,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ),
        21 => _mm256_setr_epi8(
            *s.as_ptr().offset(i as isize + 0) as i8,
            *s.as_ptr().offset(i as isize + 1) as i8,
            *s.as_ptr().offset(i as isize + 2) as i8,
            *s.as_ptr().offset(i as isize + 3) as i8,
            *s.as_ptr().offset(i as isize + 4) as i8,
            *s.as_ptr().offset(i as isize + 5) as i8,
            *s.as_ptr().offset(i as isize + 6) as i8,
            *s.as_ptr().offset(i as isize + 7) as i8,
            *s.as_ptr().offset(i as isize + 8) as i8,
            *s.as_ptr().offset(i as isize + 9) as i8,
            *s.as_ptr().offset(i as isize + 10) as i8,
            *s.as_ptr().offset(i as isize + 11) as i8,
            *s.as_ptr().offset(i as isize + 12) as i8,
            *s.as_ptr().offset(i as isize + 13) as i8,
            *s.as_ptr().offset(i as isize + 14) as i8,
            *s.as_ptr().offset(i as isize + 15) as i8,
            *s.as_ptr().offset(i as isize + 16) as i8,
            *s.as_ptr().offset(i as isize + 17) as i8,
            *s.as_ptr().offset(i as isize + 18) as i8,
            *s.as_ptr().offset(i as isize + 19) as i8,
            *s.as_ptr().offset(i as isize + 20) as i8,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ),
        20 => _mm256_setr_epi8(
            *s.as_ptr().offset(i as isize + 0) as i8,
            *s.as_ptr().offset(i as isize + 1) as i8,
            *s.as_ptr().offset(i as isize + 2) as i8,
            *s.as_ptr().offset(i as isize + 3) as i8,
            *s.as_ptr().offset(i as isize + 4) as i8,
            *s.as_ptr().offset(i as isize + 5) as i8,
            *s.as_ptr().offset(i as isize + 6) as i8,
            *s.as_ptr().offset(i as isize + 7) as i8,
            *s.as_ptr().offset(i as isize + 8) as i8,
            *s.as_ptr().offset(i as isize + 9) as i8,
            *s.as_ptr().offset(i as isize + 10) as i8,
            *s.as_ptr().offset(i as isize + 11) as i8,
            *s.as_ptr().offset(i as isize + 12) as i8,
            *s.as_ptr().offset(i as isize + 13) as i8,
            *s.as_ptr().offset(i as isize + 14) as i8,
            *s.as_ptr().offset(i as isize + 15) as i8,
            *s.as_ptr().offset(i as isize + 16) as i8,
            *s.as_ptr().offset(i as isize + 17) as i8,
            *s.as_ptr().offset(i as isize + 18) as i8,
            *s.as_ptr().offset(i as isize + 19) as i8,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ),
        19 => _mm256_setr_epi8(
            *s.as_ptr().offset(i as isize + 0) as i8,
            *s.as_ptr().offset(i as isize + 1) as i8,
            *s.as_ptr().offset(i as isize + 2) as i8,
            *s.as_ptr().offset(i as isize + 3) as i8,
            *s.as_ptr().offset(i as isize + 4) as i8,
            *s.as_ptr().offset(i as isize + 5) as i8,
            *s.as_ptr().offset(i as isize + 6) as i8,
            *s.as_ptr().offset(i as isize + 7) as i8,
            *s.as_ptr().offset(i as isize + 8) as i8,
            *s.as_ptr().offset(i as isize + 9) as i8,
            *s.as_ptr().offset(i as isize + 10) as i8,
            *s.as_ptr().offset(i as isize + 11) as i8,
            *s.as_ptr().offset(i as isize + 12) as i8,
            *s.as_ptr().offset(i as isize + 13) as i8,
            *s.as_ptr().offset(i as isize + 14) as i8,
            *s.as_ptr().offset(i as isize + 15) as i8,
            *s.as_ptr().offset(i as isize + 16) as i8,
            *s.as_ptr().offset(i as isize + 17) as i8,
            *s.as_ptr().offset(i as isize + 18) as i8,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ),
        18 => _mm256_setr_epi8(
            *s.as_ptr().offset(i as isize + 0) as i8,
            *s.as_ptr().offset(i as isize + 1) as i8,
            *s.as_ptr().offset(i as isize + 2) as i8,
            *s.as_ptr().offset(i as isize + 3) as i8,
            *s.as_ptr().offset(i as isize + 4) as i8,
            *s.as_ptr().offset(i as isize + 5) as i8,
            *s.as_ptr().offset(i as isize + 6) as i8,
            *s.as_ptr().offset(i as isize + 7) as i8,
            *s.as_ptr().offset(i as isize + 8) as i8,
            *s.as_ptr().offset(i as isize + 9) as i8,
            *s.as_ptr().offset(i as isize + 10) as i8,
            *s.as_ptr().offset(i as isize + 11) as i8,
            *s.as_ptr().offset(i as isize + 12) as i8,
            *s.as_ptr().offset(i as isize + 13) as i8,
            *s.as_ptr().offset(i as isize + 14) as i8,
            *s.as_ptr().offset(i as isize + 15) as i8,
            *s.as_ptr().offset(i as isize + 16) as i8,
            *s.as_ptr().offset(i as isize + 17) as i8,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ),
        17 => _mm256_setr_epi8(
            *s.as_ptr().offset(i as isize + 0) as i8,
            *s.as_ptr().offset(i as isize + 1) as i8,
            *s.as_ptr().offset(i as isize + 2) as i8,
            *s.as_ptr().offset(i as isize + 3) as i8,
            *s.as_ptr().offset(i as isize + 4) as i8,
            *s.as_ptr().offset(i as isize + 5) as i8,
            *s.as_ptr().offset(i as isize + 6) as i8,
            *s.as_ptr().offset(i as isize + 7) as i8,
            *s.as_ptr().offset(i as isize + 8) as i8,
            *s.as_ptr().offset(i as isize + 9) as i8,
            *s.as_ptr().offset(i as isize + 10) as i8,
            *s.as_ptr().offset(i as isize + 11) as i8,
            *s.as_ptr().offset(i as isize + 12) as i8,
            *s.as_ptr().offset(i as isize + 13) as i8,
            *s.as_ptr().offset(i as isize + 14) as i8,
            *s.as_ptr().offset(i as isize + 15) as i8,
            *s.as_ptr().offset(i as isize + 16) as i8,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ),
        16 => _mm256_setr_epi8(
            *s.as_ptr().offset(i as isize + 0) as i8,
            *s.as_ptr().offset(i as isize + 1) as i8,
            *s.as_ptr().offset(i as isize + 2) as i8,
            *s.as_ptr().offset(i as isize + 3) as i8,
            *s.as_ptr().offset(i as isize + 4) as i8,
            *s.as_ptr().offset(i as isize + 5) as i8,
            *s.as_ptr().offset(i as isize + 6) as i8,
            *s.as_ptr().offset(i as isize + 7) as i8,
            *s.as_ptr().offset(i as isize + 8) as i8,
            *s.as_ptr().offset(i as isize + 9) as i8,
            *s.as_ptr().offset(i as isize + 10) as i8,
            *s.as_ptr().offset(i as isize + 11) as i8,
            *s.as_ptr().offset(i as isize + 12) as i8,
            *s.as_ptr().offset(i as isize + 13) as i8,
            *s.as_ptr().offset(i as isize + 14) as i8,
            *s.as_ptr().offset(i as isize + 15) as i8,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ),
        15 => _mm256_setr_epi8(
            *s.as_ptr().offset(i as isize + 0) as i8,
            *s.as_ptr().offset(i as isize + 1) as i8,
            *s.as_ptr().offset(i as isize + 2) as i8,
            *s.as_ptr().offset(i as isize + 3) as i8,
            *s.as_ptr().offset(i as isize + 4) as i8,
            *s.as_ptr().offset(i as isize + 5) as i8,
            *s.as_ptr().offset(i as isize + 6) as i8,
            *s.as_ptr().offset(i as isize + 7) as i8,
            *s.as_ptr().offset(i as isize + 8) as i8,
            *s.as_ptr().offset(i as isize + 9) as i8,
            *s.as_ptr().offset(i as isize + 10) as i8,
            *s.as_ptr().offset(i as isize + 11) as i8,
            *s.as_ptr().offset(i as isize + 12) as i8,
            *s.as_ptr().offset(i as isize + 13) as i8,
            *s.as_ptr().offset(i as isize + 14) as i8,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ),
        14 => _mm256_setr_epi8(
            *s.as_ptr().offset(i as isize + 0) as i8,
            *s.as_ptr().offset(i as isize + 1) as i8,
            *s.as_ptr().offset(i as isize + 2) as i8,
            *s.as_ptr().offset(i as isize + 3) as i8,
            *s.as_ptr().offset(i as isize + 4) as i8,
            *s.as_ptr().offset(i as isize + 5) as i8,
            *s.as_ptr().offset(i as isize + 6) as i8,
            *s.as_ptr().offset(i as isize + 7) as i8,
            *s.as_ptr().offset(i as isize + 8) as i8,
            *s.as_ptr().offset(i as isize + 9) as i8,
            *s.as_ptr().offset(i as isize + 10) as i8,
            *s.as_ptr().offset(i as isize + 11) as i8,
            *s.as_ptr().offset(i as isize + 12) as i8,
            *s.as_ptr().offset(i as isize + 13) as i8,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ),
        13 => _mm256_setr_epi8(
            *s.as_ptr().offset(i as isize + 0) as i8,
            *s.as_ptr().offset(i as isize + 1) as i8,
            *s.as_ptr().offset(i as isize + 2) as i8,
            *s.as_ptr().offset(i as isize + 3) as i8,
            *s.as_ptr().offset(i as isize + 4) as i8,
            *s.as_ptr().offset(i as isize + 5) as i8,
            *s.as_ptr().offset(i as isize + 6) as i8,
            *s.as_ptr().offset(i as isize + 7) as i8,
            *s.as_ptr().offset(i as isize + 8) as i8,
            *s.as_ptr().offset(i as isize + 9) as i8,
            *s.as_ptr().offset(i as isize + 10) as i8,
            *s.as_ptr().offset(i as isize + 11) as i8,
            *s.as_ptr().offset(i as isize + 12) as i8,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ),
        12 => _mm256_setr_epi8(
            *s.as_ptr().offset(i as isize + 0) as i8,
            *s.as_ptr().offset(i as isize + 1) as i8,
            *s.as_ptr().offset(i as isize + 2) as i8,
            *s.as_ptr().offset(i as isize + 3) as i8,
            *s.as_ptr().offset(i as isize + 4) as i8,
            *s.as_ptr().offset(i as isize + 5) as i8,
            *s.as_ptr().offset(i as isize + 6) as i8,
            *s.as_ptr().offset(i as isize + 7) as i8,
            *s.as_ptr().offset(i as isize + 8) as i8,
            *s.as_ptr().offset(i as isize + 9) as i8,
            *s.as_ptr().offset(i as isize + 10) as i8,
            *s.as_ptr().offset(i as isize + 11) as i8,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ),
        11 => _mm256_setr_epi8(
            *s.as_ptr().offset(i as isize + 0) as i8,
            *s.as_ptr().offset(i as isize + 1) as i8,
            *s.as_ptr().offset(i as isize + 2) as i8,
            *s.as_ptr().offset(i as isize + 3) as i8,
            *s.as_ptr().offset(i as isize + 4) as i8,
            *s.as_ptr().offset(i as isize + 5) as i8,
            *s.as_ptr().offset(i as isize + 6) as i8,
            *s.as_ptr().offset(i as isize + 7) as i8,
            *s.as_ptr().offset(i as isize + 8) as i8,
            *s.as_ptr().offset(i as isize + 9) as i8,
            *s.as_ptr().offset(i as isize + 10) as i8,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ),
        10 => _mm256_setr_epi8(
            *s.as_ptr().offset(i as isize + 0) as i8,
            *s.as_ptr().offset(i as isize + 1) as i8,
            *s.as_ptr().offset(i as isize + 2) as i8,
            *s.as_ptr().offset(i as isize + 3) as i8,
            *s.as_ptr().offset(i as isize + 4) as i8,
            *s.as_ptr().offset(i as isize + 5) as i8,
            *s.as_ptr().offset(i as isize + 6) as i8,
            *s.as_ptr().offset(i as isize + 7) as i8,
            *s.as_ptr().offset(i as isize + 8) as i8,
            *s.as_ptr().offset(i as isize + 9) as i8,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ),
        9 => _mm256_setr_epi8(
            *s.as_ptr().offset(i as isize + 0) as i8,
            *s.as_ptr().offset(i as isize + 1) as i8,
            *s.as_ptr().offset(i as isize + 2) as i8,
            *s.as_ptr().offset(i as isize + 3) as i8,
            *s.as_ptr().offset(i as isize + 4) as i8,
            *s.as_ptr().offset(i as isize + 5) as i8,
            *s.as_ptr().offset(i as isize + 6) as i8,
            *s.as_ptr().offset(i as isize + 7) as i8,
            *s.as_ptr().offset(i as isize + 8) as i8,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ),
        8 => _mm256_setr_epi8(
            *s.as_ptr().offset(i as isize + 0) as i8,
            *s.as_ptr().offset(i as isize + 1) as i8,
            *s.as_ptr().offset(i as isize + 2) as i8,
            *s.as_ptr().offset(i as isize + 3) as i8,
            *s.as_ptr().offset(i as isize + 4) as i8,
            *s.as_ptr().offset(i as isize + 5) as i8,
            *s.as_ptr().offset(i as isize + 6) as i8,
            *s.as_ptr().offset(i as isize + 7) as i8,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ),
        7 => _mm256_setr_epi8(
            *s.as_ptr().offset(i as isize + 0) as i8,
            *s.as_ptr().offset(i as isize + 1) as i8,
            *s.as_ptr().offset(i as isize + 2) as i8,
            *s.as_ptr().offset(i as isize + 3) as i8,
            *s.as_ptr().offset(i as isize + 4) as i8,
            *s.as_ptr().offset(i as isize + 5) as i8,
            *s.as_ptr().offset(i as isize + 6) as i8,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ),
        6 => _mm256_setr_epi8(
            *s.as_ptr().offset(i as isize + 0) as i8,
            *s.as_ptr().offset(i as isize + 1) as i8,
            *s.as_ptr().offset(i as isize + 2) as i8,
            *s.as_ptr().offset(i as isize + 3) as i8,
            *s.as_ptr().offset(i as isize + 4) as i8,
            *s.as_ptr().offset(i as isize + 5) as i8,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ),
        5 => _mm256_setr_epi8(
            *s.as_ptr().offset(i as isize + 0) as i8,
            *s.as_ptr().offset(i as isize + 1) as i8,
            *s.as_ptr().offset(i as isize + 2) as i8,
            *s.as_ptr().offset(i as isize + 3) as i8,
            *s.as_ptr().offset(i as isize + 4) as i8,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ),
        4 => _mm256_setr_epi8(
            *s.as_ptr().offset(i as isize + 0) as i8,
            *s.as_ptr().offset(i as isize + 1) as i8,
            *s.as_ptr().offset(i as isize + 2) as i8,
            *s.as_ptr().offset(i as isize + 3) as i8,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ),
        3 => _mm256_setr_epi8(
            *s.as_ptr().offset(i as isize + 0) as i8,
            *s.as_ptr().offset(i as isize + 1) as i8,
            *s.as_ptr().offset(i as isize + 2) as i8,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ),
        2 => _mm256_setr_epi8(
            *s.as_ptr().offset(i as isize + 0) as i8,
            *s.as_ptr().offset(i as isize + 1) as i8,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ),
        1 => _mm256_setr_epi8(
            *s.as_ptr().offset(i as isize + 0) as i8,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ),
        _ => _mm256_setr_epi8(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ),
    }
}
